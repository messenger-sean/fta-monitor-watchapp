package com.fsilberberg.ftamonitor.view;

import android.app.Activity;
import android.app.Fragment;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import com.fsilberberg.ftamonitor.R;

import java.util.ArrayList;
import java.util.List;

/**
 * Fragment used for managing interactions for and presentation of a navigation drawer.
 * See the <a href="https://developer.android.com/design/patterns/navigation-drawer.html#Interaction">
 * design guidelines</a> for a complete explanation of the behaviors implemented here.
 * <p/>
 * Generated by templates available here: https://github.com/kanytu/Android-studio-material-template
 */
public class NavigationDrawerFragment extends Fragment implements NavigationDrawerCallbacks {

    /**
     * Remember the position of the selected item.
     */
    private static final String STATE_SELECTED_POSITION = "selected_navigation_drawer_position";

    /**
     * Per the design guidelines, you should show the drawer on launch until the user manually
     * expands it. This shared preference tracks this.
     */
    private static final String PREF_USER_LEARNED_DRAWER = "navigation_drawer_learned";

    /**
     * A pointer to the current callbacks instance (the Activity).
     */
    private NavigationDrawerCallbacks mCallbacks;

    /**
     * Helper component that ties the action bar to the navigation drawer.
     */
    private ActionBarDrawerToggle m_actionBarDrawerToggle;

    private DrawerLayout m_drawerLayout;
    private RecyclerView m_drawerList;
    private View m_fragmentContainerView;

    private int m_currentSelectedPosition = 0;
    private boolean m_fromSavedInstanceState;
    private boolean m_userLearnedDrawer;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Read in the flag indicating whether or not the user has demonstrated awareness of the
        // drawer. See PREF_USER_LEARNED_DRAWER for details.
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
        m_userLearnedDrawer = sp.getBoolean(PREF_USER_LEARNED_DRAWER, false);

        if (savedInstanceState != null) {
            m_currentSelectedPosition = savedInstanceState.getInt(STATE_SELECTED_POSITION);
            m_fromSavedInstanceState = true;
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_navigation_drawer, container, false);
        m_drawerList = (RecyclerView) view.findViewById(R.id.drawerList);
        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());
        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        m_drawerList.setLayoutManager(layoutManager);
        m_drawerList.setHasFixedSize(true);

        final List<NavigationItem> navigationItems = getMenu();
        NavigationDrawerAdapter adapter = new NavigationDrawerAdapter(navigationItems);
        adapter.setNavigationDrawerCallbacks(this);
        m_drawerList.setAdapter(adapter);
        selectItem(m_currentSelectedPosition);
        return view;
    }

    public boolean isDrawerOpen() {
        return m_drawerLayout != null && m_drawerLayout.isDrawerOpen(m_fragmentContainerView);
    }

    @Override
    public void onNavigationDrawerItemSelected(int position) {
        selectItem(position);
    }

    public List<NavigationItem> getMenu() {
        List<NavigationItem> items = new ArrayList<>();
        items.add(new NavigationItem("Field Monitor", ResourcesCompat.getDrawable(getResources(), R.drawable.ic_dvr_grey600_24dp, null)));
        items.add(new NavigationItem("Testing", ResourcesCompat.getDrawable(getResources(), R.drawable.ic_assignment_grey600_24dp, null)));
        items.add(new NavigationItem("Settings", ResourcesCompat.getDrawable(getResources(), R.drawable.ic_settings_grey600_24dp, null)));
        return items;
    }

    /**
     * Users of this fragment must call this method to set up the navigation drawer interactions.
     *
     * @param fragmentId   The android:id of this fragment in its activity's layout.
     * @param drawerLayout The DrawerLayout containing this fragment's UI.
     * @param toolbar      The Toolbar of the activity.
     */
    public void setup(int fragmentId, DrawerLayout drawerLayout, Toolbar toolbar) {
        m_fragmentContainerView = getActivity().findViewById(fragmentId);
        m_drawerLayout = drawerLayout;

        m_drawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.FRC_DARK_GREY));

        m_actionBarDrawerToggle = new ActionBarDrawerToggle(getActivity(), m_drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) {
            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                if (!isAdded()) return;

                getActivity().invalidateOptionsMenu(); // calls onPrepareOptionsMenu()
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);
                if (!isAdded()) return;
                if (!m_userLearnedDrawer) {
                    m_userLearnedDrawer = true;
                    SharedPreferences sp = PreferenceManager
                            .getDefaultSharedPreferences(getActivity());
                    sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER, true).apply();
                }
                getActivity().invalidateOptionsMenu(); // calls onPrepareOptionsMenu()
            }
        };

        // If the user hasn't 'learned' about the drawer, open it to introduce them to the drawer,
        // per the navigation drawer design guidelines.
        if (!m_userLearnedDrawer && !m_fromSavedInstanceState) {
            m_drawerLayout.openDrawer(m_fragmentContainerView);
        }

        // Defer code dependent on restoration of previous instance state.
        m_drawerLayout.post(new Runnable() {
            @Override
            public void run() {
                m_actionBarDrawerToggle.syncState();
            }
        });

        m_drawerLayout.setDrawerListener(m_actionBarDrawerToggle);
    }

    private void selectItem(int position) {
        if (m_drawerLayout != null) {
            m_drawerLayout.closeDrawer(m_fragmentContainerView);
        }
        if (m_currentSelectedPosition != position) {
            m_currentSelectedPosition = position;
            if (mCallbacks != null) {
                mCallbacks.onNavigationDrawerItemSelected(position);
            }
            ((NavigationDrawerAdapter) m_drawerList.getAdapter()).selectPosition(position);
        }
    }

    public void closeDrawer() {
        m_drawerLayout.closeDrawer(m_fragmentContainerView);
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mCallbacks = (NavigationDrawerCallbacks) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException("Activity must implement NavigationDrawerCallbacks.");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mCallbacks = null;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(STATE_SELECTED_POSITION, m_currentSelectedPosition);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Forward the new configuration the drawer toggle component.
        m_actionBarDrawerToggle.onConfigurationChanged(newConfig);
    }

}
